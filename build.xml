<?xml version="1.0"?>
<!--
Amqphp build  system, can  build to either  "class per file"  (CPF) or
"namespace per file" (NSPF) granularity.
-->

<project name="amqphp" default="build">

  <taskdef name="useclean" classname="phing.PhpUseFilterTask" />

  <taskdef name="codegen" classname="phing.AmqpCodeGenTask" />

  <property file="build.properties"/>


  <fileset dir="${srcdir}" id="SOURCES">
    <include name="**/*.php"/>
  </fileset>

  <fileset dir="${build.tempdir}" id="BUILD_ALL">
    <include name="**"/>
  </fileset>

  <fileset dir="${build.tempdir}" id="BUILD_PHP_FILES">
    <include name="**/*.php"/>
  </fileset>

  <target name="clean">
    <delete dir="${builddir}" includeemptydirs="true" verbose="true" failonerror="true" />
    <delete dir="${build.tempdir}" includeemptydirs="true" verbose="true" failonerror="true" />
  </target>



<!--
Runs  the Amqp  code  generation  routine.  This  is  Xslt based,  and
generates a set of Amqp binding classes in the specified dir.
-->
  <target name="generateAmqpBindings" depends="clean">
    <mkdir dir="${gencode.tempdir}"/>

    <codegen stylesheet="${gencode.stylesheet}"
             specfile="${gencode.specfile}"
             outputDir="${gencode.tempdir}"/>
  </target>





<!--
This target is called in a foreach which visits every file / folder in
the  ${srcdir} source tree.   Files are  ignored, and  directories are
converted in to NSPF packages.
-->
  <target name="doNspfPackage">
    <php function="is_dir" returnProperty="isDir">
      <param value="${fullPath}"/>
    </php>
    <if>
      <and>
        <istrue value="${isDir}"/>
        <istrue value="${fileName}"/>
      </and>
      <then>
        <!-- Calculate a package file name -->
        <php expression="implode('.', array_slice(explode('/', '${fullPath}'), count(explode('/', '${build.tempdir}')))) . '.php'"
             returnProperty="nspfName"/>
        <php expression="implode('\\', array_slice(explode('/', '${fullPath}'), count(explode('/', '${build.tempdir}'))))"
             returnProperty="namespace"/>

        <echo msg="Generate an nspf file, src=${fullPath}  dst=${builddir.nsPerFile}/${nspfName}  nspfName=${nspfName}"/>

        <echo file="${builddir.nsPerFile}/${nspfName}">&lt;?php</echo>
        <echo file="${builddir.nsPerFile}/${nspfName}" append="true">
namespace ${namespace};</echo>
        <append destFile="${builddir.nsPerFile}/${nspfName}">
          <filterchain>
            <replaceregexp>
              <regexp pattern="^[\s]*namespace.*$" replace="" modifiers="m"/>
            </replaceregexp>

            <!--<stripphpcomments />
            <stripwhitespace />-->

            <replaceregexp>
              <regexp pattern="&lt;\?php" replace=""/>
            </replaceregexp>
          </filterchain>
          <fileset dir="${fullPath}">
            <include name="*.php"/>
          </fileset>
        </append>

        <useclean file="${builddir.nsPerFile}/${nspfName}" fromDir="${fullPath}"/>

      </then>
    </if>
  </target>



<!--
Prepare the NSPF and CPF source trees.
-->
  <target name="build" depends="generateAmqpBindings">
    <mkdir dir="${builddir}"/>
    <mkdir dir="${builddir.nsPerFile}"/>
    <mkdir dir="${builddir.classPerFile}"/>
    <mkdir dir="${build.tempdir}"/>


    <!-- Copy all sources to the temp dir -->
    <copy todir="${build.tempdir}" haltonerror="true">
      <fileset refid="SOURCES"/>
    </copy>


    <!-- Write out nspf packages -->
    <foreach param="fileName" absparam="fullPath" target="doNspfPackage">
      <fileset refid="BUILD_ALL"/>
    </foreach>


    <!-- Copy over cpf package files -->
    <copy todir="${builddir.classPerFile}" haltonerror="true">
      <filterchain>
        <!--<stripphpcomments />
        <stripwhitespace />-->
      </filterchain>

      <fileset refid="BUILD_PHP_FILES"/>
    </copy>

    <!-- Copy over the readme -->
    <copy file="${builddir.readme}" tofile="${builddir}/README.txt"/>
  </target>


<!--
    Prepare  the  directory for  development  work  by symlinking  the
    distribution cpf files to their equivalents in the ${srcdir}
-->
  <target name="build-devtime"  depends="build">
    <!-- Set up individual symlinks from ${builddir} to ${srcdir} for all files in ${srcdir} -->
    <foreach param="fileName" absparam="fullPath" target="doBuildDevSymlink">
      <fileset dir="${srcdir}">
        <include name="**/*.php"/>
      </fileset>
    </foreach>
  </target>

<!--
    Replace given ${builddir} file with a link to the ${srcdir} file
-->
  <target name="doBuildDevSymlink">
    <delete file="${builddir.classPerFile}/${fileName}"/>
    <symlink target="${fullPath}" link="${builddir.classPerFile}/${fileName}"/>
  </target>
</project>