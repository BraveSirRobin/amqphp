<?php
 namespace amqphp\wire; use amqphp\protocol as proto; use amqphp\protocol\abstrakt; class Decimal { const BC_SCALE_DEFAULT = 8; private $unscaled; private $scale; private $bcScale = self::BC_SCALE_DEFAULT; function __construct($unscaled, $scale=false) { if ($scale !== false) { if ($scale < 0 || $scale > 255) { throw new \Exception("Scale out of range", 9876); } $this->unscaled = (string) $unscaled; $this->scale = (string) $scale; } else if (is_float($unscaled)) { list($whole, $frac) = explode('.', (string) $unscaled); $frac = rtrim($frac, '0'); $this->unscaled = $whole . $frac; $this->scale = strlen($frac); } else if (is_int($unscaled)) { $this->unscaled = $unscaled; $this->scale = 0; } else { throw new \Exception("Unable to construct a decimal", 48943); } if ($this->scale > 255) { throw new \Exception("Decimal scale is out of range", 7843); } } function getUnscaled() { return $this->unscaled; } function getScale() { return $this->scale; } function setBcScale($i) { $this->bcScale = (int) $i; } function toBcString() { return bcdiv($this->unscaled, bcpow('10', $this->scale, $this->bcScale), $this->bcScale); } function toFloat() { return (float) $this->toBcString(); } function __toString() { return $this->toBcString(); } } 