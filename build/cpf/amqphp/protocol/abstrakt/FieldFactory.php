<?php
 namespace amqphp\protocol\abstrakt; abstract class FieldFactory { protected static $Cache; private static function Lookup ($fName, $mName = '') { foreach (static::$Cache as $i => $f) { if ($f[0] === $fName && $f[1] === $mName) { return $i; } } return false; } final static function IsField ($fName, $mName = '') { return (static::Lookup($fName, $mName) !== false); } final static function GetField ($fName, $mName = '') { if (false !== ($f = static::Lookup($fName, $mName))) { return is_string(static::$Cache[$f][2]) ? (static::$Cache[$f][2] = new static::$Cache[$f][2]) : static::$Cache[$f][2]; } } final static function GetClassFields () { $r = array(); foreach (static::$Cache as $f) { if ($f[1] === '') { $r[] = static::GetField($f[0]); } } return $r; } final static function GetFieldsForMethod ($mName) { $r = array(); foreach (static::$Cache as $f) { if ($f[1] === $mName) { $r[] = static::GetField($f[0], $mName); } } return $r; } final static function Validate ($val, $fName, $mName = '') { return static::GetField($fName, $mName)->validate($val); } } 