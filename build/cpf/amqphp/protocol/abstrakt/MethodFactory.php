<?php
 namespace amqphp\protocol\abstrakt; abstract class MethodFactory { protected static $Cache; private static function Lookup ($mName, $asName = true) { $j = ($asName) ? 1 : 0; foreach (static::$Cache as $i => $f) { if ($f[$j] === $mName) { return $i; } } return false; } final static function GetMethodByName ($mName) { if (false !== ($i = static::Lookup($mName))) { return (is_string(static::$Cache[$i][2])) ? (static::$Cache[$i][2] = new static::$Cache[$i][2]) : static::$Cache[$i][2]; } } final static function GetMethodsByName (array $restrict = array()) { $m = array(); foreach (static::$Cache as $c) { if (! $restrict || in_array($c[1], $restrict)) { $m[] = static::GetMethodByName($c[1]); } } return $m; } final static function GetMethodByIndex ($idx) { if (false !== ($i = static::Lookup($idx, false))) { return (is_string(static::$Cache[$i][2])) ? (static::$Cache[$i][2] = new static::$Cache[$i][2]) : static::$Cache[$i][2]; } } final static function GetMethodsByIndex (array $restrict = array()) { $m = array(); foreach (static::$Cache as $c) { if (! $restrict || in_array($c[0], $restrict)) { $m[] = static::GetMethodByIndex($c[0]); } } return $m; } } 